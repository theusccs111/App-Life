@model APP_Life.Models.usuario

@{
    ViewBag.Title = "InfoUsuario";
}

<style>
    form {
        width: 100%;
    }

    .container {
        margin: 2%;
    }

    .col-md-10 {
        margin-bottom: 1%;
    }

    .col-md-3 {
        border-right: solid 1px #e5e5e5;
        margin-right: 5%;
        padding-right: 5%;
    }

    h1 {
        color: #06921c;
    }

    sombra {
        background: #06921c;
    }

    .caps {
        text-transform: uppercase;
    }
</style>

@using (Html.BeginForm("InfoUsuario", "Usuario", new { @class = "" }, FormMethod.Post))
{
    @Html.AntiForgeryToken()



    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.usuarioID)

    <div class="container">
        <div class="col-md-3" align="justify">

            <h1>Suas informações pessoais</h1>
            <h3>
                Gerencie suas informações básicas como nome, e-mail e número de telefone e mantenha-os sempre atualizados
                pois são informações valiosas para nós.
            </h3>

        </div>
        <div id="sombra">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control red-tooltip ", @data_toggle = "tooltip", @title = "Informe seu endereço de email" } })
                        @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.senha, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.PasswordFor(model => model.senha, new { @class = "form-control red-tooltip", @data_toggle = "tooltip", @title = "Informe uma senha", @id = "Senha" })
                        @Html.ValidationMessageFor(model => model.senha, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div>
                    @Html.HiddenFor(model => model.confirmarSenha, new { @placeholder = "Senha", @id = "ConfirmarSenha" })
                    @Html.ValidationMessageFor(model => model.confirmarSenha)
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.nome, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.nome, new { htmlAttributes = new { @class = "form-control caps red-tooltip", @data_toggle = "tooltip", @title = "Informe seu nome" } })
                        @Html.ValidationMessageFor(model => model.nome, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.sobrenome, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.sobrenome, new { htmlAttributes = new { @class = "form-control caps red-tooltip", @data_toggle = "tooltip", @title = "Informe seu sobrenome" } })
                        @Html.ValidationMessageFor(model => model.sobrenome, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.datanasc, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.datanasc, new { htmlAttributes = new { @class = "form-control red-tooltip", @data_toggle = "tooltip", @title = "Informe sua data de nascimento", @type = "Date" } })
                        @Html.ValidationMessageFor(model => model.datanasc, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.rua, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.rua, new { htmlAttributes = new { @class = "form-control caps red-tooltip", @data_toggle = "tooltip", @title = "Informe a rua de sua residência" } })
                        @Html.ValidationMessageFor(model => model.rua, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.numero, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.numero, new { htmlAttributes = new { @class = "form-control red-tooltip", @data_toggle = "tooltip", @title = "Informe o número de sua residência" } })
                        @Html.ValidationMessageFor(model => model.numero, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.bairro, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.bairro, new { htmlAttributes = new { @class = "form-control caps red-tooltip", @data_toggle = "tooltip", @title = "Informe seu bairro" } })
                        @Html.ValidationMessageFor(model => model.bairro, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.cidade, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.cidade, new { htmlAttributes = new { @class = "form-control caps red-tooltip", @data_toggle = "tooltip", @title = "Informe sua cidade" } })
                        @Html.ValidationMessageFor(model => model.cidade, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control caps red-tooltip", @data_toggle = "tooltip", @title = "Informe seu estado" } })
                        @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.telefone, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.telefone, new { htmlAttributes = new { @class = "form-control red-tooltip", @data_toggle = "tooltip", @title = "Informe seu telefone de contato" } })
                        @Html.ValidationMessageFor(model => model.telefone, "", new { @class = "text-danger" })
                    </div>
                </div>

                @if (Model.sexo == "m")
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.sexo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <label class="form-control">MASCULINO</label>
                            @Html.ValidationMessageFor(model => model.sexo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else if (Model.sexo == "f")
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.sexo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <label class="form-control">FEMININO</label>
                            @Html.ValidationMessageFor(model => model.sexo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.sexo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <label class="form-control"></label>
                            @Html.ValidationMessageFor(model => model.sexo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                }

                @Html.HiddenFor(model => model.sexo, new { htmlAttributes = new { @class = "form-control" } })


                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Salvar" class="btn btn-success" />
                        @Html.ActionLink("Voltar", "Geral", "Lancamento", new { @class = "btn btn-default" })
                    </div>


                </div>
            </div>

            <script>
        $('#Senha').change(function () {
            $('#ConfirmarSenha').val($('#Senha').val());
        });
            </script>

        </div>
    </div>
}


<fb:login-button scope="public_profile,email" onlogin="checkLoginState();">
</fb:login-button>

<div id="status">
</div>
@using (Html.BeginForm("LoginFacebook", "Login", new { @class = "" },
                                                             FormMethod.Post))
{

    if (Model.idfacebook == null)
    {

        @Html.EditorFor(model => model.idfacebook, new { htmlAttributes = new { @id = "codigo" } })

        <input type="submit" value="Sincronizar" />

    }
    else
    {

        <label>Perfil Sincronizado</label>

    }
}

<script>
    // This is called with the results from from FB.getLoginStatus().
    function statusChangeCallback(response) {
        console.log('statusChangeCallback');
        console.log(response);
        // The response object is returned with a status field that lets the
        // app know the current login status of the person.
        // Full docs on the response object can be found in the documentation
        // for FB.getLoginStatus().
        if (response.status === 'connected') {
            // Logged into your app and Facebook.
            testAPI();
        } else if (response.status === 'not_authorized') {
            // The person is logged into Facebook, but not your app.
            document.getElementById('status').innerHTML = 'Por favor logue ' +
              'no aplicativo.';
        } else {
            // The person is not logged into Facebook, so we're not sure if
            // they are logged into this app or not.
            document.getElementById('status').innerHTML = 'Por favor logue' +
              'no Facebook.';
        }
    }

    // This function is called when someone finishes with the Login
    // Button.  See the onlogin handler attached to it in the sample
    // code below.
    function checkLoginState() {
        FB.getLoginStatus(function (response) {
            statusChangeCallback(response);
        });
    }

    window.fbAsyncInit = function () {
        FB.init({
            appId: '106066606476284',
            cookie: true,  // enable cookies to allow the server to access
            // the session
            xfbml: true,  // parse social plugins on this page
            version: 'v2.5' // use graph api version 2.5
        });

        // Now that we've initialized the JavaScript SDK, we call
        // FB.getLoginStatus().  This function gets the state of the
        // person visiting this page and can return one of three states to
        // the callback you provide.  They can be:
        //
        // 1. Logged into your app ('connected')
        // 2. Logged into Facebook, but not your app ('not_authorized')
        // 3. Not logged into Facebook and can't tell if they are logged into
        //    your app or not.
        //
        // These three cases are handled in the callback function.

        FB.getLoginStatus(function (response) {
            statusChangeCallback(response);
        });

    };

    // Load the SDK asynchronously
    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));

    // Here we run a very simple test of the Graph API after login is
    // successful.  See statusChangeCallback() for when this call is made.
    function testAPI() {
        console.log('Welcome!  Fetching your information.... ');
        FB.api('/me', function (response) {
            console.log('Successful login for: ' + response.name + response.id);
            document.getElementById('status').innerHTML =
              'Obrigado por logar, ' + response.name + '!';


            $('#codigo').val(response.id);
         //   $('#codigo').css("display", "none");

            //  window.location.href = '/Lancamento/Geral/';
        });
    }
</script>
<!--
  Below we include the Login Button social plugin. This button uses
  the JavaScript SDK to present a graphical Login button that triggers
  the FB.login() function when clicked.
-->
